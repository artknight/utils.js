UTILS.Autocomplete=class extends UTILS.Base{constructor(data={}){if(super(data),_log(this.getObjectName()+" --\x3e instantiated!"),!("target"in data))throw new Error("@target must be specified upon initialization!");return this._onInput=_.debounce(this.__onInput__.bind(this),500),"is_multiple"in data&&this.setMultipleState(data.is_multiple),"container"in data&&this.setContainer(data.container),"value"in data&&this.setValue(data.value),"onInput"in data&&this.addCallback("onInput",data.onInput),"onSelected"in data&&this.addCallback("onSelected",data.onSelected),this.init(),this}getDefaults(){return{object:"utils.autocomplete",version:"0.0.2",$container:null,$suggestions:$('<div class="autocomplete-suggestions"></div>'),current_value:null,current_values:[],current_suggestions:[],is_multiple:!1,items:[],regex:{escape_letters:/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,trailing_comma:/[,\s]*$/,split_words_with_white_space:/\s*,\s*/,split_words:/,/}}}init(){let $target=this.getTarget();return this.getContainer()||this.setContainer($target.parent()),$target.off("focus.utils.autocomplete").on("focus.utils.autocomplete",this._onFocus.bind(this)),$target.off("input.utils.autocomplete").on("input.utils.autocomplete",this._onInput.bind(this)),$target.off("keydown.utils.autocomplete").on("keydown.utils.autocomplete",this._onKeydown.bind(this)),$target.off("blur.utils.autocomplete").on("blur.utils.autocomplete",this._onBlur.bind(this)),this.values.$suggestions.off("mousedown.utils.autocomplete touchstart.utils.autocomplete").on("mousedown.utils.autocomplete touchstart.utils.autocomplete","> div",this._onClick.bind(this)),setTimeout(()=>{let cursor_pos=this.getCaretCharacterOffsetWithin($target[0]);$target.focus(),this.setCursorAt(cursor_pos)}),this}getContainer(){return this.values.$container}setContainer(container){return this.values.$container=$(container),/relative|absolute|fixed/i.test(this.values.$container.css("position"))||this.values.$container.css({position:"relative"}),this.values.$container.attr("data-autocomplete","on").append(this.values.$suggestions),this}isMultiple(){return this.values.is_multiple}setMultipleState(state){return this.values.is_multiple=!!state,this}getValue(){let $target=this.getTarget();return $target.is(":input")?$target.val():$target.text()}setValue(value){let $target=this.getTarget();return $target.is(":input")?$target.val(value):$target.html(value),this}_onFocus(){let is_multiple=this.isMultiple();this.values.current_value=this.getValue(),is_multiple&&this.addTrailingComma()}__onInput__(event){let query,is_multiple=this.isMultiple(),new_value=this.getValue();if(!new_value.trim())return this.values.$suggestions.hide(),void(this.values.current_value=new_value);this.values.current_value!==new_value&&(this.values.current_value=new_value,query=is_multiple?this.getCurrentQuery():new_value,this.fns("onInput",{query:query,callback:this.onNewSuggestions.bind(this)}))}_onKeydown(event){let is_multiple=this.isMultiple(),keys_UP=38,keys_DOWN=40,keys_TAB=9,keys_RETURN=13,keys_ESC=27,keys_COMMA=188;switch(UTILS.getCharKey(event)){case keys_UP:return event.preventDefault(),void this.highlightPreviousSuggestion();case keys_DOWN:return event.preventDefault(),void this.highlightNextSuggestion();case is_multiple&&keys_COMMA:case keys_RETURN:case keys_TAB:if(this.selectHighlightedSuggestion(),this.values.$suggestions.hide(),event.keyCode===keys_TAB)return;return void event.preventDefault();case keys_ESC:return void this.values.$suggestions.hide()}}_onBlur(event){let is_multiple=this.isMultiple();this.values.$suggestions.hide(),is_multiple&&this.removeTrailingComma()}_onClick(event){event.preventDefault(),event.stopPropagation(),this.selectSuggestionByElement($(event.currentTarget)),this.values.$suggestions.hide()}onNewSuggestions(suggestions){let html="",search=this.values.current_value.replace(this.values.regex.escape_letters,"\\$&"),regex=new RegExp("("+search+")","i");if(this.values.current_values=this.values.current_value.trim().split(this.values.regex.split_words_with_white_space),this.values.current_suggestions=suggestions.map(this.normalizeSuggestion.bind(this)).filter(this.newSuggestionsOnly.bind(this)),0!==this.values.current_suggestions.length)return this.values.current_suggestions.forEach((suggestion,index)=>{let label=suggestion.label,highlight=0===index?' class="highlight"':"";label&&(label=this.htmlEscape(label),html+="<div"+highlight+">",html+=label.replace(regex,"<strong>$1</strong>"),html+="</div>")}),this.values.$suggestions.html(html).show(),this;this.values.$suggestions.hide()}newSuggestionsOnly(suggestion){if(suggestion)return-1===this.values.current_values.indexOf(suggestion.value)}normalizeSuggestion(suggestion){if(suggestion)return"string"==typeof suggestion?{label:suggestion,value:suggestion}:suggestion}highlightNextSuggestion(){let $highlighted=this.values.$suggestions.find(".highlight"),$next=$highlighted.next();if($next.length)return $highlighted.removeClass("highlight"),$next.addClass("highlight"),this}highlightPreviousSuggestion(){let $highlighted=this.values.$suggestions.find(".highlight"),$prev=$highlighted.prev();if($prev.length)return $highlighted.removeClass("highlight"),$prev.addClass("highlight"),this}selectHighlightedSuggestion(){let $highlighted=this.values.$suggestions.find(".highlight");return this.selectSuggestionByElement($highlighted),this}selectSuggestionByElement($element){let $target=this.getTarget(),is_multiple=this.isMultiple(),selected=this.values.current_suggestions[$element.index()];return selected&&(is_multiple?this.replaceCurrentWordWith(selected.value):(this.setValue(selected.value),$target.focus(),this.setCursorAt(selected.value.length))),this.fns("onSelected",{value:selected?selected.value:this.getValue()}),this}setCursorAt(position){let $target=this.getTarget(),range=document.createRange(),sel=window.getSelection(),textNode=$target[0].childNodes.length?$target[0].childNodes[0]:$target[0];return position=Math.min(textNode.length,position),range.setStart(textNode,position),range.collapse(!0),sel.removeAllRanges(),sel.addRange(range),this}getCurrentQuery(){let word,$target=this.getTarget(),cursorAt=this.getCaretCharacterOffsetWithin($target[0]),charCount=0,words=this.values.current_value.split(this.values.regex.split_words);for(var i=0;i<words.length;i++){if(charCount+(word=words[i]).length>=cursorAt)return this.values.current_value.substring(charCount,cursorAt).trim();charCount+=word.length+1}return this}replaceCurrentWordWith(newWord){let word,beforeQuery,afterQuery,$target=this.getTarget(),cursorAt=this.getCaretCharacterOffsetWithin($target[0]),charCount=0,words=this.values.current_value.split(this.values.regex.split_words);for(var i=0;i<words.length;i++){if(charCount+(word=words[i]).length>=cursorAt)return beforeQuery=this.values.current_value.substring(0,charCount).trim(),afterQuery=this.values.current_value.substring(cursorAt),this.setValue(this.htmlEscape(beforeQuery+" "+newWord)+",&nbsp"+this.htmlEscape(afterQuery)),void this.setCursorAt((beforeQuery+" "+newWord+", ").length);charCount+=word.length+1}return this}getCaretCharacterOffsetWithin(element){let range,preCaretRange,caretOffset=0,doc=element.ownerDocument||element.document,win=doc.defaultView||doc.parentWindow;return void 0!==win.getSelection&&win.getSelection().rangeCount>0&&((preCaretRange=(range=win.getSelection().getRangeAt(0)).cloneRange()).selectNodeContents(element),preCaretRange.setEnd(range.endContainer,range.endOffset),caretOffset=preCaretRange.toString().length),caretOffset}addTrailingComma(){this.getTarget();let current_value=this.getValue();return current_value&&this.setValue(current_value.replace(this.values.regex.trailing_comma,", ")),this}removeTrailingComma(){this.getTarget();let current_value=this.getValue();return this.setValue(current_value.replace(this.values.regex.trailing_comma,"")),this}htmlEscape(string){return string.replace(/&/g,"&amp").replace(/'/g,"&#39").replace(/"/g,"&quot").replace(/</g,"&lt").replace(/>/g,"&gt")}};